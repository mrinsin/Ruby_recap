A description of some of the challenges for which the solutions lie in this repository

1.
BDD Car Challenge
Process

Before starting the implementaion, copy each story into the editor as a comment, and use the function receipe to guide the implementation of each method.
Keep each class in it's own file with it's own test file.

Stories

Story: As a programmer, I can make a vehicle.
Hint: Test that Vehicle.new does not raise any errors.

Story: As a programmer, I can make a car.
Hint: Test that creating an instance of the new class does not raise any errors.

Story: As a programmer, I can tell how many wheels a car has; default is four.
Hint: initialize the car to have four wheels, then create a method to return the number of wheels.

Story: As a programmer, I can honk the horn.
Hint: When I call honk_horn, I get a "BEEP!".

Story: As a programmer, I can make a Toyota car.
Hint: Test that class Toyota which inherits from class Car can be created.

Story: As a programmer, I can honk the horn of a Toyota car which makes the sound "whoop".

Story: As a programmer, I can make a Tata car.

Story: As a programmer, I can honk the horn of a Tata car - "beep".

Story: As a programmer, I can make a Tesla car.

Story: As a programmer, I can honk the horn of Tesla - "Beep-bee-bee-boop-bee-doo-weep".

Story: As a programmer, I can tell which model year a vehicle is from. Model years never change.
Hint: Make model year part of the initialization.

Story: As a programmer, I can turn on and off the lights on a given Vehicle.
Hint: Create method(s) to allow programmer to turn lights on and off. Which class are the methods in?

Story: As a programmer, I can determine if the lights are on or off. Lights start in the off position.

Story: As a programmer, I can signal left and right. Turn signals starts off.

Story: As a programmer, I can determine the speed of a car. Speed starts at 0 km/h.

Story: As a programmer, I can speed my Teslas up by 10 km/h per acceleration.

Story: As a programmer, I can slow my Teslas down by 7 km/h per braking.

Story: As a programmer, I can speed my Tatas up by 2 km/h per acceleration.

Story: As a programmer, I can slow my Tatas down by 1.25 km/h per braking.

Story: As a programmer, I can speed my Toyotas up by 7 km/h per acceleration.

Story: As a programmer, I can slow my Toyotas down by 5 km/h per braking.

Story: As a programmer, I can call upon a car to tell me all it's information.
Hint: Implement to_s on one or more classes. You can call a super class's to_s with super.

Story: As a programmer, I can store and retrieve all of my cars from a garage.
Hint: "Garage" is a noun, "store" and "retrieve" are verbs.

Story: As a programmer, I can sort the cars in my garage based on model year.

Story: As a programmer, I can sort the cars in my garage based on model.
Hint: Sort based on class name.

Story: As a programmer, I can sort the cars in my garage based on model and then year.
Hint: Find out how the spaceship operator can help you with an array.


2.
Ruby Task List Challenge
How To Complete a Story

For each story:

Copy the story into your rspec file as a comment.
Then write the test(s) that class/method tests must pass.
Then run the test(s) and see that they fail.
Then implement the class/method, with comments, so that it passes the tests one at a time and you understand what you have created.
Starting User Stories

Story: As a developer, I can create a Task.

Story: As a developer, I can give a Task a title and retrieve it.

Story: As a developer, I can give a Task a description and retrieve it.

Story: As a developer, I can mark a Task done.

Story: As a developer, when I print a Task that is done, its status is shown.
Hint: Implement to_s have it return the features of a Task with labels (for instance, "Title: Buy Food Description: Bananas, milk").

Story: As a developer, I can add all of my Tasks to a TaskList.
Hint: A TaskList has-many Tasks

Story: As a developer with a TaskList, I can get the completed items.

Story: As a developer with a TaskList, I can get the incomplete items.

Epic: Due Date

Story: As a developer, I can create a DueDateTask, which is-a Task that has-a due date.
Hint: Use the built-in Ruby Date class

Story: As a developer, I can print an item with a due date with labels and values.
Hint: When implementing to_s, use super to call to_s on the super class.

Story: As a developer, I can add items with due dates to my TaskList.
Hint: Consider keeping items with due dates separate from the other items.

Story: As a developer with a TaskList, I can list all the not completed items that are due today.

Story: As a developer with a TaskList, I can list all the not completed items in order of due date.

Story: As a developer with a TaskList with and without due dates, I can list all the not completed items in order of due date, and then the items without due dates.

Epic: Anniversary

Story: As a developer, I can create a to do item for an anniversary (a yearly recurring event) .
Hint: An Anniversary has a month and a day.
Hint: An Anniversary is a special kind of DueDateTask where the due date changes depending on the current date (override the due_date method to return the next annivesary date).

Story: As a developer, I can print an item for an anniversary with field labels and values.

Story: As a developer with a TaskList with and without due dates and yearly recurring dates, I can list all the not completed items in order of due date and yearly dates for the current month.

Story: As a developer with a TaskList with a collection of items with and without due dates and yearly recurring dates, I can list all the not completed items in order of due date and yearly dates for the current month, then the items without due dates.
